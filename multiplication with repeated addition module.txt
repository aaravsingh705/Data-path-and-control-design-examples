`timescale 1ns / 1ps

//==========================//
//     MULTIPLIER UNIT     //
//==========================//

//==========================//
//        DATA PATH         //
//==========================//

module MUL_datapath (
    output eqz,
    input LdA, LdB, LdP, clrP, decB,
    input [15:0] data_in,
    input clk
);

    wire [15:0] X, Y, Z, Bout, Bus;

    PIPO1 A (X, Bus, LdA, clk);
    PIPO2 P (Y, Z, LdP, clrP, clk);
    CNTR B (Bout, Bus, LdB, decB, clk);
    ADD AD (Z, X, Y);
    EQZ COMP (eqz, Bout);

endmodule

module PIPO1 (
    output reg [15:0] dout,
    input [15:0] din,
    input ld,
    input clk
);
    always @(posedge clk)
    begin
        if (ld)
            dout <= din;
    end
endmodule

module PIPO2 (
    output reg [15:0] dout,
    input [15:0] din,
    input ld, clr,
    input clk
);
    always @(posedge clk)
    begin
        if (clr)
            dout <= 16'b0;
        else if (ld)
            dout <= din;
    end
endmodule

module CNTR (
    output reg [15:0] dout,
    input [15:0] din,
    input ld, dec,
    input clk
);
    always @(posedge clk)
    begin
        if (ld)
            dout <= din;
        else if (dec)
            dout <= dout - 1;
    end
endmodule

module ADD (
    output reg [15:0] out,
    input [15:0] in1,
    input [15:0] in2
);
    always @(*)
    begin
        out = in1 + in2;
    end
endmodule

module EQZ (
    output eqz,
    input [15:0] data
);
    assign eqz = (data == 0);
endmodule


//==========================//
//       CONTROL PATH       //
//==========================//

module controller (
    output reg LdA, LdB, LdP, clrP, decB, done,
    input clk,
    input eqz,
    input start
);
    reg [2:0] state;

    parameter S0 = 3'b000,  // Idle
              S1 = 3'b001,  // Load A
              S2 = 3'b010,  // Load B and clear P
              S3 = 3'b011,  // Compute Loop
              S4 = 3'b100;  // Done

    // State Transition
    always @(posedge clk)
    begin
        case (state)
            S0: if (start) state <= S1;
            S1: state <= S2;
            S2: state <= S3;
            S3: if (eqz) state <= S4;
            S4: state <= S4;
            default: state <= S0;
        endcase
    end

    // Output Logic
    always @(state)
    begin
        // Default values
        LdA = 0; LdB = 0; LdP = 0; clrP = 0; decB = 0; done = 0;

        case (state)
            S0:
            begin
                // Waiting for start
            end
            S1:
            begin
                LdA = 1;
            end
            S2:
            begin
                LdB = 1;
                clrP = 1;
            end
            S3:
            begin
                LdP = 1;
                decB = 1;
            end
            S4:
            begin
                done = 1;
            end
        endcase
    end
endmodule
